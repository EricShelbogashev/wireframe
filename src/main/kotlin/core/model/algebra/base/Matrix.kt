package model.algebra.base

import org.jetbrains.annotations.Contract

interface Matrix<E : Number, Heir : Matrix<E, Heir>> {
    val rows: Int
    val cols: Int

    /**
     * Выполняет умножение данной матрицы на другую матрицу.
     * Произведение возможно только если количество столбцов первой матрицы
     * равно количеству строк второй матрицы.
     *
     * @param other Другая матрица для умножения.
     * @return Результат умножения в виде новой матрицы.
     * @throws IllegalArgumentException если размерности матриц не совместимы для умножения.
     */
    operator fun times(other: Heir): Heir

    /**
     * Выполняет умножение матрицы на скаляр.
     * Все элементы матрицы умножаются на указанный скаляр.
     *
     * @param scalar Скаляр для умножения.
     * @return Результат умножения в виде новой матрицы.
     */
    @Contract(pure = true)
    operator fun times(scalar: Double): Heir

    /**
     * Выполняет деление матрицы на скаляр.
     * Все элементы матрицы делятся на указанный скаляр.
     *
     * @param scalar Скаляр для деления. Должен быть не равен нулю.
     * @return Результат деления в виде новой матрицы.
     * @throws ArithmeticException если скаляр равен нулю.
     */
    @Contract(pure = true)
    operator fun div(scalar: Double): Heir

    /**
     * Возвращает элемент матрицы по заданным индексам.
     * Индексация начинается с нуля.
     *
     * @param row Индекс строки.
     * @param col Индекс столбца.
     * @return Элемент матрицы.
     * @throws IndexOutOfBoundsException если индексы выходят за пределы размеров матрицы.
     */
    operator fun get(row: Int, col: Int): E

    fun safeGet(row: Int, col: Int): E

    /**
     * Задает значение элемента матрицы по заданным индексам.
     * Индексация начинается с нуля.
     *
     * @param row Индекс строки.
     * @param col Индекс столбца.
     * @param value Значение для установки.
     * @throws IndexOutOfBoundsException если индексы выходят за пределы размеров матрицы.
     */
    operator fun set(row: Int, col: Int, value: E)

    /**
     * Заменяет значение элемента матрицы по заданным индексам и возвращает предыдущее значение.
     *
     * @param row Индекс строки.
     * @param col Индекс столбца.
     * @param value Новое значение для установки.
     * @return Элемент, который был заменен.
     * @throws IndexOutOfBoundsException если индексы выходят за пределы размеров матрицы.
     */
    fun replace(row: Int, col: Int, value: E): E

    /**
     * Выполняет сложение данной матрицы с другой матрицей.
     * Матрицы должны иметь одинаковые размеры.
     *
     * @param other Другая матрица для сложения.
     * @return Результат сложения в виде новой матрицы.
     * @throws IllegalArgumentException если размерности матриц не одинаковы.
     */
    operator fun plus(other: Heir): Heir

    /**
     * Выполняет сложение матрицы со скаляром.
     * К каждому элементу матрицы добавляется указанный скаляр.
     *
     * @param scalar Скаляр для сложения.
     * @return Результат сложения в виде новой матрицы.
     */
    @Contract(pure = true)
    operator fun plus(scalar: Double): Heir

    /**
     * Выполняет транспонирование матрицы.
     * Результатом является новая матрица, в которой строки и столбцы исходной матрицы поменяны местами.
     *
     * @return Транспонированная матрица.
     */
    @Contract(pure = true)
    fun transpose(): Heir

    /**
     * Вычисляет скалярное произведение Фробениуса между этой и другой матрицей.
     * Матрицы должны иметь одинаковые размеры.
     *
     * @param other Другая матрица для скалярного произведения.
     * @return Результат скалярного произведения.
     * @throws IllegalArgumentException если размерности матриц не одинаковы.
     */
    fun dot(other: Heir): E

    /**
     * Проверяет, является ли матрица нулевой.
     * Матрица считается нулевой, если все ее элементы равны нулю.
     *
     * @return `true`, если матрица нулевая.
     */
    fun isZero(): Boolean

    /**
     * Проверяет, является ли матрица квадратной.
     * Матрица считается квадратной, если количество строк равно количеству столбцов.
     *
     * @return `true`, если матрица квадратная.
     */
    fun isSquare(): Boolean = rows == cols

    /**
     * Сравнивает данную матрицу с другим объектом на предмет равенства,
     * с учетом алгебраических свойств и возможной эквивалентности структур.
     *
     * @param other Объект для сравнения с данной матрицей.
     * @return `true`, если объекты эквивалентны.
     */
    override fun equals(other: Any?): Boolean

    /**
     * Возвращает хэш-код данной матрицы.
     *
     * @return Хэш-код матрицы.
     */
    override fun hashCode(): Int
}
